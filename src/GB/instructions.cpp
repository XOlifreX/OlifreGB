#include "GB/instructions.h"

// **********************************

// NOP
SM83_INSTRUCTION_IMPLEMENTATION(NOP,)

SM83_INSTRUCTION_STEPS_IMPLEMENTATION(
    NOP, 
    SM83_INSTRUCTION_DECLARATION(NOP)
);

// *****

// LD BC, n16
SM83_INSTRUCTION_IMPLEMENTATION(LDBC,)

SM83_INSTRUCTION_IMPLEMENTATION(LDBC_P2, 
    cpu->registers.C = cpu->bus->readMemoryU8(cpu->registers.PC);
)

SM83_INSTRUCTION_IMPLEMENTATION(LDBC_P3, 
    cpu->registers.B = cpu->bus->readMemoryU8(cpu->registers.PC);
)

SM83_INSTRUCTION_STEPS_IMPLEMENTATION(
    LDBC, 
    SM83_INSTRUCTION_DECLARATION(LDBC), 
    SM83_INSTRUCTION_DECLARATION(LDBC_P2),
    SM83_INSTRUCTION_DECLARATION(LDBC_P3)
);

// *****

// LD [BC], A
SM83_INSTRUCTION_IMPLEMENTATION(LDBCA,)

SM83_INSTRUCTION_IMPLEMENTATION(LDBCA_P2, 
    cpu->bus->writeMemoryU8(cpu->registers.BC, cpu->registers.A);
)

SM83_INSTRUCTION_STEPS_IMPLEMENTATION(
    LDBCA, 
    SM83_INSTRUCTION_DECLARATION(LDBCA),
    SM83_INSTRUCTION_DECLARATION(LDBCA_P2),
);

// *****

// INC BC
SM83_INSTRUCTION_IMPLEMENTATION(INCBC,)

SM83_INSTRUCTION_IMPLEMENTATION(INCBC_P2, 
    cpu->registers.BC++;
)

SM83_INSTRUCTION_STEPS_IMPLEMENTATION(
    INCBC,
    SM83_INSTRUCTION_DECLARATION(INCBC),
    SM83_INSTRUCTION_DECLARATION(INCBC_P2),
);

// *****

// INC B
SM83_INSTRUCTION_IMPLEMENTATION(INCB,
    cpu->registers.F.C = IS_CARRY_SET_ADDITION_U8(cpu->registers.B, 1)
    cpu->registers.B++;

    cpu->registers.F.Z = cpu->registers.B & 0xFF == 0x00 ? 0 : 1;
    cpu->registers.F.N = 0;
)

SM83_INSTRUCTION_STEPS_IMPLEMENTATION(
    INCB,
    SM83_INSTRUCTION_DECLARATION(INCB)
);

// *****

// DEC B
SM83_INSTRUCTION_IMPLEMENTATION(DECB,
    cpu->registers.F.C = IS_CARRY_SET_SUBSTRACTION_U8(cpu->registers.B, 1)
    cpu->registers.B--;

    cpu->registers.F.Z = cpu->registers.B & 0xFF == 0x00 ? 0 : 1;
    cpu->registers.F.N = 1;
)

SM83_INSTRUCTION_STEPS_IMPLEMENTATION(
    DECB,
    SM83_INSTRUCTION_DECLARATION(DECB)
);

// *****

// LD B, n8
SM83_INSTRUCTION_IMPLEMENTATION(LDBN,)

SM83_INSTRUCTION_IMPLEMENTATION(LDBN_P2, 
    cpu->registers.B = cpu->bus->readMemoryU8(cpu->registers.PC);
)

SM83_INSTRUCTION_STEPS_IMPLEMENTATION(
    LDBN, 
    SM83_INSTRUCTION_DECLARATION(LDBN),
    SM83_INSTRUCTION_DECLARATION(LDBN_P2),
);

// **********************************

const SM83Opcode opcodesTable8Bit[] = {
    SM83_INSTRUCTION_INFO(0x00, "NOP",          1, 1, SM83_INSTRUCTION_STEPS_DECLARATION(NOP)),
    SM83_INSTRUCTION_INFO(0x01, "LD BC, NN",    3, 3, SM83_INSTRUCTION_STEPS_DECLARATION(LDBC)),
    SM83_INSTRUCTION_INFO(0x02, "LD [BC], A",   1, 2, SM83_INSTRUCTION_STEPS_DECLARATION(LDBCA)),
    SM83_INSTRUCTION_INFO(0x03, "INC BC",       1, 2, SM83_INSTRUCTION_STEPS_DECLARATION(INCBC)),
    SM83_INSTRUCTION_INFO(0x04, "INC B",        1, 1, SM83_INSTRUCTION_STEPS_DECLARATION(INCB)),
    SM83_INSTRUCTION_INFO(0x05, "DEC B",        1, 1, SM83_INSTRUCTION_STEPS_DECLARATION(DECB)),
    SM83_INSTRUCTION_INFO(0x06, "LD B, N",      1, 1, SM83_INSTRUCTION_STEPS_DECLARATION(LDBN))
};
